' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package packstation #DDDDDD {
  package entity #FFFFFF {
    class Packstation <<entity>>
  }

  package service #FFFFFF {
    class PackstationWriteService << control >>
  }

  class "type PackstationDTO = Omit<Packstation, 'pakete' | 'aktualisiert' | 'erzeugt'" as PackstationDTO
  hide PackstationDTO circle

    interface IdInput {
        id: number
    }

  class PackstationMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() packstationDTO: PackstationDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() packstationDTO: PackstationDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  PackstationMutationResolver o-down-> "1" PackstationWriteService : service

  PackstationMutationResolver ..> Packstation
  PackstationMutationResolver ..> PackstationDTO
  PackstationMutationResolver ..> IdInput
  PackstationDTO .up.> Packstation
  PackstationMutationResolver ..> Promise
  PackstationMutationResolver ..> Resolver

  PackstationMutationResolver .up.> AuthGuard
  PackstationMutationResolver .up.> Roles

  PackstationDTO .[hidden].> Promise
  PackstationDTO .[hidden].> Resolver
}

hide empty members

@enduml
