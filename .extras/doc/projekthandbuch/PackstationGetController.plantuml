@startuml Controller-Klasse

interface Promise<T>

package @nestjs/common {
  class "@Controller" as Controller
  hide Controller circle

  class "@Get" as Get
  hide Get circle

  class "@Req" as Req
  hide Req circle

  class "@Res" as Res
  hide Res circle

  class "@Param" as Param
  hide Param circle

  class "@Query" as Query
  hide Query circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle
}

package express {
  class Request
  class Response

  Response .[hidden].> Controller
}

package packstation {
  package entity #FFFFFF {
    class Packstation <<entity>>

    Packstation .[hidden].> Promise
    Packstation .[hidden].> Request
  }

  package service {
    class PackstationReadService << control >>
  }

  package rest #DDDDDD {
    PackstationQuery -up-|> Packstation

    class PackstationGetController << control >> << @Controller() >> << @UseInterceptors() >> {
      + @Get() async getId(@Param() id: number, @Req() req: Request, @Headers() version: string, @Res() res: Response): Promise<Response<PackstationModel | undefined>>
      + @Get() async get(@Query() query: PackstationQuery, @Req() req: Request,  @Res() res: Response): Promise<Response<PackstationenModel | undefined>>
    }

    PackstationGetController o--> "1" PackstationReadService : service

    PackstationGetController ..> Controller
    PackstationGetController ..> Request
    PackstationGetController ..> Response
    PackstationGetController ..> Promise
    PackstationGetController .up.> PackstationModel
    PackstationGetController .up.> PackstationQuery

    PackstationReadService .[hidden].> Request
    PackstationReadService .[hidden].> Promise
    Response .right[hidden].> Controller
  }
}

hide empty members

@enduml
